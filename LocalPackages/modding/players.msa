# This file is intended to contain commands related to general management of players.
# See also: players.ms

# /tpnext [player]
#	Teleport to the next player in the list of all online players, ordered by login time.
#	Staff members in ModMode and Admins are skipped.
#	The optional player can be a player name or a 1-based index into the players array.

*:/tpnext [$player] = >>>
	_assertperm('restricted')
	@index = _get_tp_index($player, 1)
	_tp_index(@index, all_players())
<<<


# /tpnext [player]
#	Teleport to the next player in the list of all online players, ordered by login time.
#	Staff members in ModMode and Admins are skipped.
#	The optional player can be a player name or a 1-based index into the players array.

*:/tpprev [$player] = >>>
	_assertperm('restricted')
	@index = _get_tp_index($player, -1)
	_tp_index(@index, all_players())
<<<


# /get-bed-spawn [player>]
#	Show the coordinate's of the player's bed.

*:'/get-bed-spawn' [$] = >>>
	_assertperm('restricted')
	if ($ == '') {
		die(color(GOLD).'Usage: '.color(YELLOW).'/get-bed-spawn <player>'.color(WHITE).' - Show the player\'s bed spawn location.')
	}
	@loc = pbed_location($)
	if (is_null(@loc)) {
		msg(color(GOLD).'No bed spawn set for '.$)
	} else {
		msg(color(GOLD).$.'\'s bed is at ('.@loc[world].', '.integer(@loc[x]).', '.integer(@loc[y]).', '.integer(@loc[z]).')')
	}
<<<


# Retrieve name history for the UUID that currently holds a name
*:/namehistory [$player] = >>>
	_assertperm('admin') #admin or restricted level, depending on rate limit concerns
	if ($player == '') {
		die(color(RED).'Usage: /namehistory <player>')
	}
	@uuid = _get_puuid($player)
	if (!@uuid) {
		die(color(RED).'Error: could not obtain UUID for supplied username.')
	}
	http_request('https://api.mojang.com/user/profiles/'.@uuid.'/names', array(
		timeout: 5000,
		success: closure(@response){
			@names = array()
			@data = json_decode(@response['body'])
			foreach(@val in @data){
				@names[] = @val['name']
			}
			msg(color(GOLD).'Name change history for '.$player.': ')
			msg(color(GRAY).array_implode(@names, ', '))
		},
		error: closure(@response){
			die(color(RED).'Error: the request could not be completed.')
		}
	));
<<<
