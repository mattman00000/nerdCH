*:/removenear $item $radius = >>>
    if(gt($radius,25), 
        die(color(red) 'Whoa, whoa, whoa. Step it down a notch, turbo.'), 
    #else:
        run(/removenear $item $radius))
<<<

*:'//fixwater' $radius = >>>
    if($radius > 25){ 
        die(color(red) . 'Whoa, whoa, whoa. Step it down a notch, turbo.') 
    } else {
        run('/fixwater ' . $radius)
    }
<<<
*:'//fixlava' $radius = >>>
    if($radius > 25){
        die(color(red) . 'TROGDOR THE BURNINATOR can only do up to //fixlava 25. Sorry.')
    } else {
        run('/fixlava ' . $radius)
    }
<<<

*:/fixwater $ = call_alias(concat('//fixwater ', $))
*:/fixlava $ = call_alias(concat('//fixlava ', $))

*:'//removenear' [$] = >>> 
        assign(@match, parse_args($))
        if(equals(array_size(@match), 2),
                if(lt(@match[1], 25),
                        run(concat('/removenear ', $)),
                #else
                        msg(concat(color(red), '/removenear radius must be <=25'))),
        #else
                msg(concat(color(red), 'Syntax: /removenear block_id radius')))
<<<

*:/removenear [$] = call_alias(concat('//removenear ', $))

*:'//butcher' [$] = >>>
	@args = parse_args( $ )
	@hasRadius = null
	foreach(@args, @value){
		if(is_integral(@value)){
			@hasRadius = @value
			break()
		}
	}
	if(@hasRadius === null){
		die(color(RED).'Holy radius, batman, you were about to kill everything in the world! Specify a radius.')
	}
	if(@hasRadius > 100){
		die(color(RED).'Holy radius, batman, that\'s a large radius! Tone it down some.')
	}
	run('/butcher '.$)
<<<

*:/butcher [$] = call_alias('//butcher ' . $ )

*:'//drain' [$] = >>>
    if(equals($, ''),
        msg(concat(color(red), 'Syntax: /drain radius')),
    #else:
        if(lte($, 15),
            run(concat('//drain ', $)),
        #else:
            msg(concat(color(red), '/drain radius must be <=15'))))
<<<

*:/drain [$] = call_alias(concat('//drain ', $))

*:/ri = >>>
    /remove items 9999
    /remove arrows 9999
<<<

*:/deselect = run('//sel cuboid')

#*://ramp [$x] [$dir1] [$dir2] = >>>
#	_assertperm('admin', 0)
#        for (assign(@i, 0), lt(@i, $x), inc(@i),
#		run(concat('//shift 1 ', $dir1))
#		run(concat('//shift 1 ', $dir2))
#		run('//set air')
#	)
#<<<

*:'//ramp' $x $dir1 $dir2 [$block='rail'] [$dir1_offset=1] [$dir2_offset=1] = >>>
	_assertperm('admin', 0)
	for (assign(@i, 0), lt(@i, $x), inc(@i),
		run(concat('//shift ', $dir1_offset, ' ', $dir1))
		run(concat('//shift ', $dir2_offset, ' ', $dir2))
		run(concat('//set ', $block))
	)
<<<

*:/spline [$] = >>>
	_assertperm('mod',0)
	run(/cs spline $)
<<<

*:/hspline [$] = >>>
	_assertperm('mod',0)
	run(/cs spline h $)
<<<

*:/rspline [$] = >>>
	_assertperm('mod',0)
	run(/cs rspline $)
<<<

*:/hrspline [$] = >>>
	_assertperm('mod',0)
	run(/cs rspline h $)
<<<

*:/gravity [$] = >>>
	_assertperm('admin',0)
	run(/cs gravity)
<<<

*:'/overlay-on' [$] = >>>
	_assertperm('mod',0)
	run('/cs overlay-on '.$)
<<<
