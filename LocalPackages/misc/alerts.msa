# Commands to control regularly scheduled broadcast server messages.

# /alert
#	Overall help for the /alert command.

*:/alert = >>>
	msg(color(LIGHT_PURPLE).'Usage:');
	msg(color(LIGHT_PURPLE).'    /alert list');
	msg(color(WHITE)       .'        List all broadcast messages.');
	msg(color(LIGHT_PURPLE).'    /alert add <color> <message>');
	msg(color(WHITE)       .'        Add the message to the broadcast rotation.');
	msg(color(LIGHT_PURPLE).'    /alert insert <index> <color> <message>');
	msg(color(WHITE)       .'        Insert the message into the broadcast rotation.');
	msg(color(LIGHT_PURPLE).'    /alert remove <number>');
	msg(color(WHITE)       .'        Remove a message by number.');
	msg(color(LIGHT_PURPLE).'    /alert interval [<seconds>]');
	msg(color(WHITE)       .'        Get or set the interval between broadcasts in seconds.');
	msg(color(LIGHT_PURPLE).'    /alert load <file>');
	msg(color(WHITE)       .'        Bulk load alerts from a text file. Use with caution.');
<<<

# /alert list
#	List all of the alerts. Anyone can run this.

*:/alert list = >>>
	@alerts = _get_alerts();
	msg(color(LIGHT_PURPLE).'There are '.array_size(@alerts).' alerts.');
	@index = 1;
	foreach (@alerts, @a,
		if (is_array(@a)) {
			msg(color(@a[color]).'('.@index.') '.@a[msg]);
		} else {
			msg(color(LIGHT_PURPLE).'('.@index.') '.@a);
		}
		inc(@index);
	)
<<<


# /alert add color message
#	An admin command to add a new alert.

*:/alert add $alertColor $ = >>>

	_assertperm('admin');
	@alerts = _get_alerts();

	# Canonical color names
	@validColors = array(
		darkgrey: DARK_GRAY,
		orange: GOLD,
		grey: GRAY,
		pink: LIGHT_PURPLE,
		purple: LIGHT_PURPLE
	);
	@excluded = array(BOLD, ITALIC, PLAIN_WHITE, RANDOM, STRIKETHROUGH, UNDERLINE);
	foreach (reflect_pull(enum, ChatColor), @color,
		if (!array_contains(@excluded, @color)) {
			@key = to_lower(replace(@color, '_', ''));
            @validColors[@key] = @color;
            @validColors[replace(@key, 'gray', 'grey')] = @color;
		}
	);

	# Canonicalise color parameter
	@colorName = to_lower(replace($alertColor, '_', ''));

	# Handle command without a specified color
	if (array_index_exists(@validColors, @colorName)) {
		@actualColor = @validColors[@colorName];
		@alertMessage = $;
	} else {
		if ($alertColor[0] != '&') {
			msg(color(RED).'"'.$alertColor.'" is not a valid color name. Defaulting to light purple.');
		}
		@actualColor = LIGHT_PURPLE;
		@alertMessage = $alertColor.' '.$;
	}

	# Add the new alert
	@newAlert = array(color: @actualColor, msg: colorize(@alertMessage));
	array_push(@alerts, @newAlert);

	# Save the updated alerts
	store_value('server.alerts.messages', @alerts);
	msg(color(LIGHT_PURPLE).'Alert #'.array_size(@alerts).' added.');
	
<<<


# /alert insert index color message
#	An admin command to insert a new alert at a specified position in the list.

*:/alert insert $index $alertColor $ = >>>

	_assertperm('admin');
	@alerts = _get_alerts();

        # Check that the position is valid
	if (!is_integral($index) || $index < 1 || $index > array_size(@alerts) + 1) {
		die(color(RED).'The index must be a number between 1 and '.(array_size(@alerts) + 1).', inclusive.');
	}

	# Canonical color names
	@validColors = array(
		darkgrey: DARK_GRAY,
		orange: GOLD,
		grey: GRAY,
		pink: LIGHT_PURPLE,
		purple: LIGHT_PURPLE
	);
	@excluded = array(BOLD, ITALIC, PLAIN_WHITE, RANDOM, STRIKETHROUGH, UNDERLINE);
	foreach (reflect_pull(enum, ChatColor), @color,
		if (!array_contains(@excluded, @color)) {
			@key = to_lower(replace(@color, '_', ''));
            @validColors[@key] = @color;
            @validColors[replace(@key, 'gray', 'grey')] = @color;
		}
	);

	# Canonicalise color parameter
	@colorName = to_lower(replace($alertColor, '_', ''));

	# Handle command without a specified color
	if (array_index_exists(@validColors, @colorName)) {
		@actualColor = @validColors[@colorName];
		@alertMessage = $;
	} else {
		if ($alertColor[0] != '&') {
			msg(color(RED).'"'.$alertColor.'" is not a valid color name. Defaulting to light purple.');
		}
		@actualColor = LIGHT_PURPLE;
		@alertMessage = $alertColor.' '.$;
	}

	# Add the new alert
	@newAlert = array(color: @actualColor, msg: colorize(@alertMessage));
	array_insert(@alerts, @newAlert, $index - 1);

	# Save the updated alerts
	store_value('server.alerts.messages', @alerts);
	msg(color(LIGHT_PURPLE).'Alert #'.$index.' added.');
	
<<<

# /alert remove number
#	An admin command to remove a specific alert by its 1-based /alert list index.

*:/alert remove $number = >>>
	_assertperm('admin');
	@alerts = _get_alerts();
	@number = $number;
	if (!is_integral(@number) || @number < 1 || @number > array_size(@alerts)) {
		if (array_size(@alerts) == 0) {		
			die(color(RED).'There are no alerts to remove.');
		} else {
			die(color(RED).'You must specify a number from 1 to '.array_size(@alerts).', inclusive.');
		}
	}

	@removed = array_remove(@alerts, @number - 1);
	if (is_array(@removed)) {
		msg(color(LIGHT_PURPLE).'Removed alert: '.@removed[msg]);
	} else {
		msg(color(LIGHT_PURPLE).'Removed alert: '.@removed);
	}
	store_value('server.alerts.messages', @alerts);
<<<


# /alert interval
#	An admin command to show the interval between broadcast messages, in seconds.

*:/alert interval = >>>
	_assertperm('admin');
        @seconds = get_value('server.alerts.seconds');
        if (is_null(@seconds)) {
            @seconds = 200;
            store_value('server.alerts.seconds', @seconds);
	}
	msg(color(LIGHT_PURPLE).'Alerts are broadcast every '.@seconds.' seconds.');
<<<

# /alert interval seconds
#	An admin command to set the interval between broadcast messages, in seconds.

*:/alert interval $seconds = >>>
	_assertperm('admin');
	@minInterval = 30;
	@seconds = $seconds;
	if (! is_numeric(@seconds)) {
		die(color(RED).'You must specify the interval in seconds as a number.');
	}
	if (@seconds < @minInterval) {
		die(color(RED).'The interval must be at least '.@minInterval.' seconds.');
	}

	@seconds = integer(@seconds);
	store_value('server.alerts.seconds', @seconds);
	try(
		clear_task(get_value('server.alerts.task'));
	)
	_start_alerts();
	msg(color(LIGHT_PURPLE).'The alert broadcast interval was set to '.@seconds.' seconds.');
<<<

# /alert load <file>
#	An admin command to read all the alerts from the specified file.
#	Each line of the file is added as a new alert, in addition to those already present.

*:/alert load $file = >>>
	_assertperm('admin');
	@alerts = _get_alerts();

	# Guard against file disclosure. Disallow '/' in filenames. Require '.alerts' suffix.
	@file = $file;
	if (string_position(@file, '/') != -1) {
		die(color(RED).'The file must be in the same directory as this script.');
	}
	@suffix = '.alerts';
	if (string_position(@file, @suffix) + length(@suffix) != length(@file)) {
		die(color(RED),'The file name must end in ".alerts".');
	}

	# Read file. Add lines that aren't blank.
	try(
		@lines = split('\n', read(@file));
		@count = 0;
		foreach(@lines, @message,
			@message = trim(@message);
			if (@message != '') {
				inc(@count);
				array_push(@alerts, @message);
			}
		)
		store_value('server.alerts.messages', @alerts);
		msg(color(LIGHT_PURPLE).'Added '.@count.' alerts.');
	,#catch
		msg(color(RED).'That file could not be read.');
	)
<<<
